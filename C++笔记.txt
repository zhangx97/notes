C++中不允许定义元素个数不确定的数组。例如：int a[n]; //这种定义是不允许的

动态内存分配机制————这种内存分配是在程序运行时进行的，而不是在编译时就确定的。

变量申请
Type *pointer = new Type;
delete pointer;

例如
int *p1 = new int;
delete p1;

int *p2 = new int(10); //初始化为10
delete p2;

数组申请
Type *pointer = new Type[N];
delete[] pointer;

int *p = new int[10];
p[10] = 10; //数组越界

造成内存泄露的一种情况：用new动态分配的内存空间没有用delete释放，程序结束也不会被系统回收。
						重启计算机，能解决这种情况。

释放一个指针并不会使该指针的值变为NULL。
delete一个指针后，编译器只会释放该指针所指向的内存空间，而不会删除这个指针本身。
在删除一个指针之后，一定将该指针设置成空指针（即在delete *p之后一定要加上： p=NULL），否则会出现野指针。
可以应用NULL来判断指针是否初始化成功。




try catch throw


















